---
name: login

<%
  config_artifacts_path = "/var/vcap/jobs/login/config/security"
  protocol = p('login.protocol')

  uaa_base = nil
  if_p('uaa.url') do |uaa_url|
    uaa_base = uaa_url
  end.else_if_p('login.uaa_base') do |login_uaa_base|
    uaa_base = login_uaa_base
  end.else do
    uaa_base = "#{protocol}://uaa.#{p('domain')}"
  end

  entity_base_url_fallback = uaa_base.sub("://uaa.", "://login.")

  login_entityBaseUrl =
    (properties.login && properties.login.saml && properties.login.saml.entity_base_url) ?
      "#{protocol}://#{properties.login.saml.entity_base_url}" :
      entity_base_url_fallback

  entity_id_fallback = login_entityBaseUrl.sub(/^http.*\:\/\//,"")

  login_entityId = (properties.login && properties.login.saml && properties.login.saml.entityid) ?
     properties.login.saml.entityid :
     properties.login.entity_id ?
       properties.login.entity_id :
         entity_id_fallback

  login_authorizeUrl = (properties.uaa.url) ? "#{properties.uaa.url}/oauth/authorize" : "#{entity_base_url_fallback}/oauth/authorize"

  login_url = login_entityBaseUrl
  if_p('login.url') do |login_url_value|
    login_url = login_url_value
  end
%>

#uaa_base: <%=uaa_base%>
#entity_base_url_fallback: <%=entity_base_url_fallback%>
#login_entityBaseUrl: <%=login_entityBaseUrl%>
#entity_id_fallback: <%=entity_id_fallback%>
#login_entityId: <%=login_entityId%>

logging:
  config: /var/vcap/jobs/login/config/log4j.properties

<%
  # The login secret is defined in one of two properties
  # uaa.login.client_secret or uaa.clients.login.secret
  # If both of these are defined, then use the latter
  if properties.uaa && properties.uaa.clients && properties.uaa.clients.login && properties.uaa.clients.login.secret
    login_secret = properties.uaa.clients.login.secret
  elsif properties.uaa && properties.uaa.login && properties.uaa.login.client_secret
    login_secret = properties.uaa.login.client_secret
  else
    raise ArgumentError, 'uaa.login.client_secret or uaa.clients.login.secret must be set.'
  end
%>

uaa:
  url: <%= uaa_base %>
<% if_p('login.links') do |login_links| %>
links: <% login_links.each do |id,url| %>
  <%= id %>: <%= url %><% end %>
<% end %>
<% if_p('login.smtp') do |login_smtp| %>
smtp: <% login_smtp.each do |key,val| %>
  <%= key %>: <%= val %><% end %>
<% end %>
<% if_p('login.tiles') do |login_tiles| %>
tiles: <% login_tiles.each do |tile| %>
- <% tile.each do |key,val| %><%= key %>: <%= val %>
  <% end %>
<% end %>
<% end %>

# The secret that this login server will use to authenticate to the uaa
LOGIN_SECRET: <%= login_secret %>
require_https: <%= p('uaa.require_https') %>
dump_requests: <%= p('uaa.dump_requests') %>
assetBaseUrl: <%= p('login.asset_base_url') %>

<% if_p('login.notifications.url') do |login_notifications_url| %>
notifications:
  url: <%= login_notifications_url %>
<% end %>

logout:
  redirect:
    url: <%= p('login.logout.redirect.url') %>
    parameter:
      disable: <%= (properties.login.logout.redirect.parameter && (!properties.login.logout.redirect.parameter.disable.nil?)) ? properties.login.logout.redirect.parameter.disable : "true" %><% if (properties.login.logout.redirect.parameter && (!properties.login.logout.redirect.parameter.whitelist.nil?)) %>
      whitelist: <% properties.login.logout.redirect.parameter.whitelist.each do |whitelistedurl| %>
      - <%= whitelistedurl %><% end %>
   <% end %>

login:
  branding:
  <% if_p('login.branding.company_name') do |company_name| %>
    companyName: <%= company_name %>
  <% end %>
  <% if_p('login.branding.product_logo') do |product_logo| %>
    productLogo: <%= product_logo %>
  <% end %>
  <% if_p('login.branding.square_logo') do |square_logo| %>
    squareLogo: <%= square_logo %>
  <% end %>
  <% if_p('login.branding.footer_legal_text') do |footer_legal_text| %>
    footerLegalText: <%= footer_legal_text %>
  <% end %>
  <% if_p('login.branding.footer_links') do |footer_links| %>
    footerLinks: <% footer_links.each do |key,val| %>
      <%= key %>: <%= val %><% end %>
  <% end %>
<% if_p('login.home_redirect') do |home_redirect| %>
  homeRedirect: <%= home_redirect %>
<% end %>
  url: <%= login_url %>
  entityBaseURL: <%= login_entityBaseUrl %>
  entityID: <%= login_entityId %>
  <% if !properties.login.invitations_enabled.nil? %>
  invitationsEnabled: <%= properties.login.invitations_enabled %>
  <% end %>
  prompt:
    username:
      text: <%= properties.login.prompt.username.text %>
    password:
      text: <%= properties.login.prompt.password.text %>
  <% if_p('login.saml.serviceProviderCertificate') do |serviceProviderCert| %>
  serviceProviderCertificate: |
    <%= serviceProviderCert.gsub("\n", "\n    ") %>
  <% end %>
  <% if_p('login.saml.serviceProviderKey') do |serviceProviderKey| %>
  serviceProviderKey: |
    <%= serviceProviderKey.gsub("\n", "\n    ")%>
  <% end %>
  <% if_p('login.saml.serviceProviderKeyPassword') do |serviceProviderKeyPassword| %>
  serviceProviderKeyPassword: <%= serviceProviderKeyPassword %>
  <% end %>
  <% if !properties.login.self_service_links_enabled.nil? || !properties.login.signups_enabled.nil? %>
  selfServiceLinksEnabled: <%= properties.login.self_service_links_enabled.nil? ? properties.login.signups_enabled : properties.login.self_service_links_enabled %>
  <% end %>
  saml:
    <% if !properties.login.saml.signMetaData.nil? %>
    signMetaData: <%= properties.login.saml.signMetaData %>
    <% end %>
    <% if !properties.login.saml.signRequest.nil? %>
    signRequest: <%= properties.login.saml.signRequest %>
    <% end %>
    <% if !properties.login.saml.wantAssertionSigned.nil? %>
    wantAssertionSigned: <%= properties.login.saml.wantAssertionSigned %>
    <% end %>
    providers: <% if properties.login.saml.providers then properties.login.saml.providers.marshal_dump.reject {|k,_| k.to_s == ''}.each do |idpAlias,idpProvider| %>
      <%= idpAlias %>: <% idpProvider.marshal_dump.reject {|k,_| ["idpMetadata", "idpMetadataXML", "idpMetadataURL"].include?(k.to_s)}.each do |key,value|%>
        <% if key.to_s.include?("attributeMappings") then %>
        attributeMappings: <% value.marshal_dump.each do |key,val| %>
          <%= key %>: <%= val %><% end %>
        <% else %>
        <%= key %>: <%= value.is_a?(String) && value.match("\n") ? "| \n          " + value.gsub("\n", "\n          ") + "" : value %><% end %><% end %>
        idpMetadata: <%= (idpProvider.idpMetadataURL || idpProvider.idpMetadataXML || idpProvider.idpMetadata).inspect %><% end %>
    <% end %>
    <% if properties.login.saml.idpEntityAlias && (properties.login.saml.idpMetadataURL || properties.login.saml.idp_metadata_file) %>
      <%= properties.login.saml.idpEntityAlias %>:
        idpMetadata: <%= properties.login.saml.idpMetadataURL ? properties.login.saml.idpMetadataURL : "/var/vcap/jobs/login/" + properties.login.saml.idp_metadata_file %>
        assertionConsumerIndex: <%= properties.login.saml.assertionConsumerIndex %>
        nameID: <%= properties.login.saml.nameidFormat %>
        metadataTrustCheck: <%= properties.login.saml.metadataTrustCheck %>
        showSamlLoginLink: true
        linkText: 'Use your corporate credentials'
        <% if properties.login.saml.attributeMappings then %>
        attributeMappings: <% properties.login.saml.attributeMappings.marshal_dump.each do |key,val| %>
          <%= key %>: <%= val %><% end %>
        <% end %>
    <% end %>
    socket:
      connectionManagerTimeout: <%= properties.login.saml.socket.connectionManagerTimeout %>
      soTimeout: <%= properties.login.saml.socket.soTimeout %>
  authorize:
    url: <%= login_authorizeUrl %>

<% if properties.login.analytics && properties.login.analytics.code && properties.login.analytics.domain %>
analytics:
  code: <%= properties.login.analytics.code %>
  domain: <%= properties.login.analytics.domain %>
<% end %>
