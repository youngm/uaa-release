---
<%
  uaa_db = properties.uaadb.databases.find { |db| db.tag == "uaa" }
  uaa_role = properties.uaadb.roles.find { |role| role.tag == "admin" }
  protocol = properties.login.protocol
  issuer_uri = p("uaa.issuer", p("uaa.url", "#{protocol}://uaa.#{properties.domain}"))
  oauth_clientsLoginRedirectUri = "#{protocol}://login.#{properties.domain}"
%>

<%
  # The login secret is defined in one of two properties
  # uaa.login.client_secret or uaa.clients.login.secret
  # If both of these are defined, then use the latter
  if properties.uaa && properties.uaa.clients && properties.uaa.clients.login && properties.uaa.clients.login.secret
    login_secret = properties.uaa.clients.login.secret
  elsif properties.uaa && properties.uaa.login && properties.uaa.login.client_secret
    login_secret = properties.uaa.login.client_secret
  else
    raise ArgumentError, 'uaa.login.client_secret or uaa.clients.login.secret must be set.'
  end
  if properties.uaa && properties.uaa.clients && properties.uaa.clients.login
    properties.uaa.clients.login.secret = login_secret
  end
%>

name: uaa

database:
  url: jdbc:<%= properties.uaadb.db_scheme %>://<%= properties.uaadb.address %>:<%= properties.uaadb.port %>/<%= uaa_db.name %>
  username: <%= uaa_role.name %>
  password: "<%= uaa_role.password %>"
  maxactive: <%= properties.uaa.database.max_connections %>
  maxidle:  <%= properties.uaa.database.max_idle_connections %>
  removeabandoned: <%= properties.uaa.database.remove_abandoned %>
  logabandoned: <%= properties.uaa.database.log_abandoned %>
  abandonedtimeout: <%= properties.uaa.database.abandoned_timeout %>
  <%= (properties.uaa.database && !(properties.uaa.database.case_insensitive.nil?)) ? 'caseinsensitive: ' + properties.uaa.database.case_insensitive.to_s : '' %>

<% if properties.uaa && properties.uaa.ldap && ((properties.uaa.ldap.enabled &&  (properties.uaa.ldap.enabled==true)) || (properties.uaa.spring_profiles && properties.uaa.spring_profiles.eql?('ldap'))) %>
spring_profiles: <%= properties.uaadb.db_scheme %>,ldap
<% elsif properties.uaa && properties.uaa.spring_profiles && properties.uaa.spring_profiles.include?('ldap') && properties.uaa.ldap %>
spring_profiles: <%= properties.uaa.spring_profiles ? properties.uaa.spring_profiles : properties.uaadb.db_scheme %>
<% elsif properties.login && properties.login.spring_profiles && properties.login.spring_profiles.include?('ldap') &&  properties.login.ldap && properties.login.ldap.profile_type %>
spring_profiles: <%= properties.uaadb.db_scheme %>,ldap
<% else %>
spring_profiles: <%= properties.uaadb.db_scheme %>
<% end %>

logging:
  config: /var/vcap/jobs/uaa/config/log4j.properties
      
<% if properties.uaa.jwt %>
jwt:
  token:
    policy:
      accessTokenValiditySeconds: <%= properties.uaa.jwt.policy.accessTokenValiditySeconds %>
      refreshTokenValiditySeconds: <%= properties.uaa.jwt.policy.refreshTokenValiditySeconds %>
      global:
        accessTokenValiditySeconds: <%= properties.uaa.jwt.policy.global.accessTokenValiditySeconds %>
        refreshTokenValiditySeconds: <%= properties.uaa.jwt.policy.global.refreshTokenValiditySeconds %>
  <% if properties.uaa.jwt.policy.keys then properties.uaa.jwt.policy.keys.marshal_dump.each do |kid,keyPair| %>
      keys:
      <% next unless keyPair %>
        <%= kid %>:<% keyPair.marshal_dump.each do |key,value| %>
          <%= key %>: |
<%= "            " + value.gsub("\n", "\n            ") %><% end %><% end %>
  <% end %>
  <% if_p("uaa.jwt.claims.exclude") do |exclusions| %>
    claims:
      exclude: <% exclusions.each do |exclusion| %>
      - <%= exclusion %><% end %>
  <% end %>
  <% if properties.uaa.jwt.signing_key && properties.uaa.jwt.verification_key %>
    signing-key: |
<%= "        " + properties.uaa.jwt.signing_key.gsub("\n", "\n        ") %>
    verification-key: |
<%= "        " + properties.uaa.jwt.verification_key.gsub("\n", "\n        ") %>
  <% end %>
<% end %>

authentication:
  policy:
    lockoutAfterFailures: <%= properties.uaa.authentication.policy.lockoutAfterFailures %>
    countFailuresWithinSeconds: <%= properties.uaa.authentication.policy.countFailuresWithinSeconds %>
    lockoutPeriodSeconds: <%= properties.uaa.authentication.policy.lockoutPeriodSeconds %>
    global:
      lockoutAfterFailures: <%= properties.uaa.authentication.policy.global.lockoutAfterFailures %>
      countFailuresWithinSeconds: <%= properties.uaa.authentication.policy.global.countFailuresWithinSeconds %>
      lockoutPeriodSeconds: <%= properties.uaa.authentication.policy.global.lockoutPeriodSeconds %>

password:
  policy:
    minLength: <%= properties.uaa.password.policy.minLength %>
    maxLength: <%= properties.uaa.password.policy.maxLength %>
    requireUpperCaseCharacter: <%= properties.uaa.password.policy.requireUpperCaseCharacter %>
    requireLowerCaseCharacter: <%= properties.uaa.password.policy.requireLowerCaseCharacter %>
    requireDigit: <%= properties.uaa.password.policy.requireDigit %>
    requireSpecialCharacter: <%= properties.uaa.password.policy.requireSpecialCharacter %>
    expirePasswordInMonths: <%= properties.uaa.password.policy.expirePasswordInMonths %>
    global:
      minLength: <%= properties.uaa.password.policy.global.minLength %>
      maxLength: <%= properties.uaa.password.policy.global.maxLength %>
      requireUpperCaseCharacter: <%= properties.uaa.password.policy.global.requireUpperCaseCharacter %>
      requireLowerCaseCharacter: <%= properties.uaa.password.policy.global.requireLowerCaseCharacter %>
      requireDigit: <%= properties.uaa.password.policy.global.requireDigit %>
      requireSpecialCharacter: <%= properties.uaa.password.policy.global.requireSpecialCharacter %>
      expirePasswordInMonths: <%= properties.uaa.password.policy.global.expirePasswordInMonths %>

disableInternalAuth: <%= properties.uaa.disableInternalAuth %>
disableInternalUserManagement: <%= properties.uaa.disableInternalUserManagement %>

issuer.uri: <%= issuer_uri %>

oauth:
  <% if protocol == "https" %>
  authorize:
    ssl: true
  <% end %>
  client:
    autoapprove: <% properties.uaa.client.autoapprove.each do |client_id| %>
      - <%= client_id %><% end %>
  clients:
<% if properties.uaa.clients then properties.uaa.clients.marshal_dump.each do |id,client| %>
    <% next unless client %>
    <%= id %>:<% client.marshal_dump.each do |key,value|%>
      <%= key %>: <%= value %><% end %><% end %>
<% end %>
<% if !properties.uaa.clients || !properties.uaa.clients.admin %>
    admin:
      authorized-grant-types: client_credentials
      authorities: clients.read,clients.write,clients.secret,uaa.admin,scim.read,scim.write,password.write
      id: admin
      secret: "<%= properties.uaa.admin.client_secret %>"
<% end %>
<% if !properties.uaa.clients || !properties.uaa.clients.login %>
    login:
      id: login
      override: true
      secret: "<%= login_secret %>"
      authorized-grant-types: authorization_code,client_credentials,refresh_token
      authorities: oauth.login,notifications.write,critical_notifications.write,emails.write
      scope: openid,oauth.approvals
      redirect-uri: <%= oauth_clientsLoginRedirectUri %>
<% end %>
  user:
    authorities: <% properties.uaa.user.authorities.each do |authority| %>
      - <%= authority %><% end %>
scim:
  userids_enabled: <%= properties.uaa.scim.userids_enabled %>
  user.override: <%= properties.uaa.scim.user.override %>
<%
 if properties.uaa.scim && properties.uaa.scim.users then %>
  users: <% properties.uaa.scim.users.each do |user| %>
  <% if user.is_a? String then %>
    - <%= user %><%
     else
       usr_name = user.name
       usr_password = user.password || ''
       usr_fname = user.firstName || ''
       usr_lname = user.lastName || ''
       usr_email = user.email || usr_name
       usr_origin = user.origin || 'uaa'
       usr_groups = ''
       if user.groups then
         usr_groups = user.groups.join(',')
       end %>
    - <%= usr_name + '|' + usr_password + '|' + usr_email + '|' + usr_fname + '|' + usr_lname + '|' + usr_groups + '|' + usr_origin%><%
     end %><%
  end %><%
 end %>

<% if_p('uaa.scim.groups') do |groups| %>
  <% if groups.is_a? String then %>
  groups: <%= groups %>
  <% else %>
  groups:
  <% groups.each do |group_name, group_desc| %>
    <%= group_name %>: <%= group_desc %><% end %>
  <% end %>
<% end %>

<% if properties.uaa.scim && properties.uaa.scim.external_groups then %>
  external_groups: <% properties.uaa.scim.external_groups.each do |group| %>
    - <%= group %><% end %>
<% end %>

zones:
  internal:
    hostnames:
    <% if_p('domain') do |domain| %>
      - <%= "login.#{domain}" %>
    <% end %>
    <% if !properties.uaa.zones.internal.hostnames.nil? %>
      <% properties.uaa.zones.internal.hostnames.each do |hostname| %>
      - <%= hostname %><% end %>
    <% end %>

<% if !properties.uaa.require_https.nil? %>
require_https: <%= properties.uaa.require_https %>
<% end %>
<% if !properties.uaa.dump_requests.nil? %>
dump_requests: <%= properties.uaa.dump_requests %>
<% end %>
<% if properties.uaa && properties.uaa.ldap && ((properties.uaa.ldap.enabled &&  (properties.uaa.ldap.enabled==true)) || (properties.uaa.spring_profiles && properties.uaa.spring_profiles.include?('ldap'))) %>
ldap:
  ldapdebug: 'Ldap configured through UAA'
  profile:
    file: <%= (properties.uaa.ldap.profile_type == 'simple-bind') ? 'ldap/ldap-simple-bind.xml' : (properties.uaa.ldap.profile_type == 'search-and-bind') ? 'ldap/ldap-search-and-bind.xml' : 'ldap/ldap-search-and-compare.xml' %>
  base:
    url: '<%= properties.uaa.ldap.url %>'
    <% if properties.uaa.ldap.profile_type == 'simple-bind' %> 
    userDnPattern: '<%= properties.uaa.ldap.userDNPattern %>'
    userDnPatternDelimiter: '<%= properties.uaa.ldap.userDNPatternDelimiter%>'
    <% else  %>
    userDn: '<%= properties.uaa.ldap.userDN %>'
    password: '<%= properties.uaa.ldap.userPassword %>'
    searchBase: '<%= properties.uaa.ldap.searchBase %>' 
    searchFilter: '<%= properties.uaa.ldap.searchFilter %>'
    <% end %>
    <% if properties.uaa.ldap.profile_type == 'search-and-compare' %> 
    passwordAttributeName: <%= properties.uaa.ldap.passwordAttributeName %>
    passwordEncoder: <%= properties.uaa.ldap.passwordEncoder %>
    localPasswordCompare: <%= properties.uaa.ldap.localPasswordCompare %>
    <% end %>
    mailAttributeName: '<%= properties.uaa.ldap.mailAttributeName%>'
    mailSubstitute: '<%= properties.uaa.ldap.mailSubstitute %>'
    mailSubstituteOverridesLdap: <%= properties.uaa.ldap.mailSubstituteOverridesLdap %>
    referral: <%= properties.uaa.ldap.referral %>
  <% if properties.uaa.ldap.emailDomain %>
  emailDomain: <% properties.uaa.ldap.emailDomain.each do |domain| %>
  - <%= domain %><% end %><% end %>
  <% if properties.uaa.ldap.attributeMappings %>
  attributeMappings: <% properties.uaa.ldap.attributeMappings.marshal_dump.each do |key,val| %>
    <%= key %>: <%= val %><% end %><% end %>
  <% if properties.uaa.ldap.externalGroupsWhitelist %>
  externalGroupsWhitelist: <% properties.uaa.ldap.externalGroupsWhitelist.each do |group| %>
  - <%= group %><% end %>
  <% end %>
  <% if properties.uaa.ldap.sslCertificate %>
  ssl: 
    sslCertificate: ! <%= "'" + p("uaa.ldap.sslCertificate").gsub("\n", "\n\n    ") + "'" %>
    <% if properties.uaa.ldap.sslCertificateAlias %>
    sslCertificateAlias: <%= properties.uaa.ldap.sslCertificateAlias %>
    <% end %>
  <% end %>
  <% if properties.uaa.ldap.groups && properties.uaa.ldap.groups.profile_type %>
  groups:
    file: <%= (properties.uaa.ldap.groups.profile_type == 'no-groups') ? 'ldap/ldap-groups-null.xml' : (properties.uaa.ldap.groups.profile_type == 'groups-as-scopes') ? 'ldap/ldap-groups-as-scopes.xml' : 'ldap/ldap-groups-map-to-scopes.xml' %>
    searchBase: '<%= properties.uaa.ldap.groups.searchBase %>'
    groupRoleAttribute: '<%= (properties.uaa.ldap.groups.profile_type == 'groups-as-scopes') ? properties.uaa.ldap.groups.groupRoleAttribute : 'spring.security.ldap.dn' %>'
    groupSearchFilter: '<%= properties.uaa.ldap.groups.groupSearchFilter %>'
    searchSubtree: <%= properties.uaa.ldap.groups.searchSubtree %>
    maxSearchDepth: <%= properties.uaa.ldap.groups.maxSearchDepth %>
    autoAdd: <%= properties.uaa.ldap.groups.autoAdd %>
  <% end %>
<% elsif properties.login && properties.login.spring_profiles && properties.login.spring_profiles.include?('ldap') &&  properties.login.ldap && properties.login.ldap.profile_type %>
ldap:
  ldapdebug: 'Ldap configured through Login Server'
  profile:
    file: <%= (properties.login.ldap.profile_type == 'simple-bind') ? 'ldap/ldap-simple-bind.xml' : (properties.login.ldap.profile_type == 'search-and-bind') ? 'ldap/ldap-search-and-bind.xml' : 'ldap/ldap-search-and-compare.xml' %>
  base:
    url: '<%= properties.login.ldap.url %>'
    <% if properties.login.ldap.profile_type == 'simple-bind' %> 
    userDnPattern: '<%= properties.login.ldap.userDNPattern %>'
    <% else  %>
    userDn: '<%= properties.login.ldap.userDN %>'
    password: '<%= properties.login.ldap.userPassword %>'
    searchBase: '<%= properties.login.ldap.searchBase %>' 
    searchFilter: '<%= properties.login.ldap.searchFilter %>'
    <% end %>
    <% if properties.login.ldap.profile_type == 'search-and-compare' %> 
    passwordAttributeName: <%= properties.login.ldap.passwordAttributeName %>
    passwordEncoder: <%= properties.login.ldap.passwordEncoder %>
    localPasswordCompare: <%= properties.login.ldap.localPasswordCompare %>
    <% end %>
  <% if properties.login.ldap.sslCertificate %>
  ssl: 
    sslCertificate: ! <%= "'" + p("login.ldap.sslCertificate").gsub("\n", "\n\n    ") + "'" %>
    <% if properties.login.ldap.sslCertificateAlias %>
    sslCertificateAlias: <%= properties.login.ldap.sslCertificateAlias %>
    <% end %>
  <% end %>  
<% end %>